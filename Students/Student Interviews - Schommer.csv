,Questions,Ever,Lydia
Background,Have you taken SoftDes?,yes,
,What was the deciding factor for taking it or not taking it? Or choosing to take it later?,"didn't know software and i was really scared of it and wanted something to force me to do it, if you take a class youre forced to do it; really like taking classes on something completely new, it takes a lot of energy to not  know things; softdes was easily my favorite class at olin so far, Ifeel like it might have been a favorite for me because I was so biased to make it a favorite of mine, it was taught in such a different way than I taught myself, super refreshing, really apreciated how to easily; I usually try to set up hotkey if I can, like in an editor",
Skills,Can you describe a time you used computation outside of SoftDes?,"all the time; OSS: was doing CNC chiseling, all software was like the key part of it, I made a slicer for STLs, also all tool path generation, that was also how do you make a tool path that doesn't shatter your block; the thing i realized after testing is that large chunks of materials would fall off at the edges, doing all that tool path design stuff was fun and all software; feel like I like putting things i llearn into use even if they shouldnt be; ever since i learned how to make pcbs, I design them for things that have no right to have pcbs designed for them, for example: found a way in the internship to design a pcb and make one even though we didn't need one, it was nowhere in the job description",
,Can you tell us about any experiences you've had learning software outside of class?,"the time i tried to learn software before Olin: why i wanted to take a class, in high school jr year, I tried to teach myself C++, didn't know what language to teach myself, my dad supposedly did software stuff and named a few languages that I could learn, and I heard C++ first and did that one, I got on eof those thick books with all the C++ things, I remember being able to compile code and run hello world, that took me forever, I only made it through a third of the book before I realized I learned all these things that were really separate from eachother, and couldn't find the use of this thing, and it was so painful that I stopped, so i knew a little bit of C++ but not enough to be useful, as soon as I saw softdes",
Practicality,"Could you tell us about a time where computation would have been useful, but you didn’t have the skills at the time?","yeah, there was this time i was playing kerbal space program, and I really wanted to make an automated launch system, this is worst example i couldve picked; new example: not that I didn't have any competency, but didnt have enough, in funrobo, i feel like I was not able to do nearly as much because I wasnt familiar enough with the software, we had built our robot, had technically done electrical, which was connecting a few things, which was really hard back in the day, we'd done that, then we were in the software part, I was trying to make a controller for autonmously controlling the robot based on vision, i was also tring to do something with ml, so a lot of that experinec was going from hurdle to hurdle that made work really inefficient, wouldve been nice to know those techniques initially; funrobo was supposed to be in C++ which i had arguably become familiar with but didn't know, we were using C++ and ROS, ROS is like learning a language in and of itself, that was the main thing, how do you get something you're programming onto the robot, it was kinda rough, I would program something and not really be able to test it on the robot, there were a lot of systems like getting camera from odroid onto code, there were three steps; odroid to microcontroller, then have it do the thing, then see if it was actually working, it was such a complex chain fo things that knowing software there wouldve helped; knowing ROS wouldve been good, didn't know what SSH meant, or what any network searching tools, like knowing what are computers, how they find eachother, etc, realized I had those problems after I took the class, been an ongoing learning process",
Topics (if taken SoftDes),"If you’ve taken SoftDes, is there any topic in software you’d like to explore further after taking the class?","yes, softdes did a great job of teaching how to do a lot of stuff, but a lot of my interests now are doing things fast, would be cool to have algorithm design class, like if you want to make efficient collision detector, a difference of algorithm there can be wayy faster than another, how to know if yours is theoretically optimal, it's a way of... maybe theres something informal like algorithm optimzation stuff; took softdes, then softsys",
,"If you took SoftDes, are there any software topics you explored further after taking the class?","ive done a lot of computer vision stuff, a lot more machine learnign since then, a lot more 3d things, like ray tracers, slicers, lots of CAD features, I've done like genetic algorithms stuff, more mechanical simulation things, like structural analysis with large meshes of things, that was fun; robotics, lots of controls-> like inverse kinematics solvers, robot simulators, I made an n jointed robotic arm simulator, it worked technically, you had a gui to move all the joints and set up the arm, that was for robotic arm i was making, it was modularized, did point cloud generation of like where the robot arm was and stuff, end goal was machine learning with robot arm to learn how to spin a coin effectively as long as it could, keep spin time at max, wanted to know where to position coin relative to robot arm, so I did lots of 3d plotting of whewre the arm can move and stuff like that",
Considerations,"If you’ve taken SoftDes, are you interested in learning more advanced software topics after taking the class?","yes, but i think the qualifier is that I now feel like I can learn things well enough on my own that I dont need a class on that, Im intersted in learning more, but not taking more advanced classes unless they're really cool, i take classes for things I dont know and im scared of or would be hard for me to learn by myself; i took online ml course after softdes and taught myself lots of techniques and have done 3 or 4 ml projects since then, like ml of what a user's question could be tagged, I now am familiar enough with that I can learn it on my own, it's not something Im terrified of anymore",
,What would keep you from taking a SoftDes follow up class? (Or a completely separate programming class?),"main problem is too many other classes I wanna take, i was looking at the schedule and there are too many classes and not enough time, so it's lower on the priority list I guess, but the main thing is time, no particular oh i'm done with software or anything, its more about how do I maximize my learning rates",
,,"super excited about comprobo cause its lots of stuff ive avoided cause the math and computation is real tricky, i wanna learn all the lydar slam algorithms and stuff, its on par with learning machine learning through an online course; a lot of things are very specific, im not taking compnet because i feel like if i ever need that for anything i need, i would figure it out or be forced, btu i cant see myself ever needing it, but i do seee myself needing stuff from comprobo, i like speicifc classes but only when they align with my interests",
,,"there are so many topics I wanna learn about, if someone gives me cool topics, i would chose that one, but if you ask me to come up with them, I would really have to think about it",
,,"i would pay to leanr how kernals work, how lots of different ml techniques are designed, i really like classes that teach you how to design something as opposed to how to use it, the reason I liked eclectronics so much was because we were taught how to design our own circuit boards versus doing circuit analysis, then you can go back learn circuit analysis and decide it's what your life needs, good to learn what all the pain points are through suffering, then to have a class that relieves all of those pain poitns",
,,"all of the joy i get from good classes is beacuse of the suffering i would be doing otherwise, im into the whole you painfully learn",
,,"nice to realize how hard something is, then realize that someone else did somethign 10 times better, I tried making my own slicing algorithm at first, i spent a very long time doing that, then read some of the new research papers and realized it was so useful, undersatnding their approach once youve tried somethign is so much easier",
,,"debugging and structure may not be a whole class, but that could definitely be a part of it cause ""Oh my gosh, am I bad""",
,,"required toolboxes were great addition to the class, it was cool to pick top things you wanted to learn and do them",
,,"""It's a start up, I do what I want""",