,Questions,Ever Notes,Lydia Notes
Their job,Where do they work?  How long have they been there?  Are they in management or an individual contributor?,"google for 4 yrs: worked on repair automation on data center machines, google has so many switches and stuff that they break a lot, wrote code in CA of the process, that was the bigest project, also worked on Zegat: app that has lots of restaurants, moved to cloud container builder: wrote in golang: it's a good language, probably not great pedagocial language, doing some freelancing, conducting interviews for larger tech companies like pinterest, worked for company subcontracting these companies: done a lot of interviews from interviewer side, most suggestions don't help in that regard, a lot more to being a software engineering than the job, definitely for people who are more serious about software engineering: algorithms at Wellesley is good, worked at start up right after Olin, which was funded on military contracts, my new job is going to be data analysis for hedge fund managers, they buy data and we work with it, like numbers of cars in a parking lot, credit card transactions at a company, unsubcribe robot I built -> unsubscribes you from mailing list by forwarding email to unsubsribe, where it reads a page and tries to unsubscribe you from that; open ended projects -> a lot of people in classes will say oh i took kickstarter and replicated it and I gained a lot of experience because I did the back end and front end -> this is not compelling as doing something new, require that someone solves a new problem, we can get around that by letting people pick a problem they have and fix it: it can be super small and only matter to a few people, you could be your own user group here, the problem should be real and novel, ",
How do they use computation,"Tell us a story about a time when you used computation in a job that you’ve had since you’ve been at Olin.
","unsubscribe robot was a good example -> went from ideation of being annoyed by unsubscribing from emails -> decided to solve it, computation to me involves lots of numbers, using selenium was a good tool for that, lets you click on things and select them and do different things within them, it's a simulated browser, knowing how to use that and generalize it, hundreds opeople are emailing it and getting value from it",
,How do you utilize computation in your work?,"on data centered software: lots of standardization: standardized process for these different things, a lot of the things that we did were easier to do in computing, talked a bit about unsubscribe thing",
,Do you anticipate your job becoming more (or less) computational over time?  Why?,"saw how data science and ml were gonna get huge before that, i decided not to get into that because i understood/ realized that solid core software engineering will always be needed, and a lot of those skills can be mapped to other things that are more hyped, a software engineer is versatile, being good at core skills is super important, only see demand increasing, a good way to think about this: if you artifically increase salary of all software engineers and accountants,say 2x, accountants would be fired, but if you were to double the market rate, there's no way to abstract what their doing to leverage their skills, software engineers are hired to automate away the accountants",
Experience with Computing at Olin and Elsewhere,"While at Olin, describe the learning experiences you had (both inside and outside of the classroom)","as far as learning, other than interviewing, nothing I learned at Olin was very applicable, but of course it was more about learning to digest problems or dice them up and go about finding a way to get to a solution, comparch was impactful, it was satisfying because we went from atoms/ physics of a transistors to bubble sort, an assembly language that created a very high level algorithm -> satisfying in philisophical sense, using verilog to do some of those things was pretty sweet, comparch was my intro to that, we coverd the most ground there; had a hard time at Olin: feel like you would generally consider me a successful olin graduate, but a lot of that came after olin and I was squarely average while at Olin, didn't spend much time outside of class outside of getting by, went to maybe one or two hackathons, no big contributions, just because it was tough enough to get by",
,Describe any other learning experiences related to computing you had either before entering Olin or since graduating.,"after: online class that was one of the best courses I've ever taken, an AI class from UC Berkely, taught by Dan Cliene, he had taught a class on Edx that was great, very well fit to my current level of understanding, which wasn't the case for everyone, but it was a well done class, at Google I learned a lot: but no class or anything directly that I was learning, I was learning much slower at Google, and the speed at which I could execute things after Google was crazy, very different type of engineering, but it improved my general ability very much so that I was good at this stuff, slow moving but consistent at Google, I haven't taken any masters classes or anything like that",
What skills do they look for in potential job candidates,"Skills versus content knowledge versus process
","design docs -> considered a skill in a way, some knowledge upfront about it, but I'm kind of from the camp that almost nothing in college is directly applied, any company you work for, nothing you learned in class is directly applicable in knowledge sense, so teaching to know how to learn yourself, not sure there's any place for knowledge based things, docker is sort of closer to that, but its so universal that it would make sense",
,What kind of skills/ knowledge do you want people you’re going to hire to have?,"worked for company doingn interviewing -> it wasn't my judgement, I was applying their filter, it was very specifc to algorithm solving ability of people, it was general coding ability, didn't evaluate any soft skills, solving a real problem was bigi for me, but it was so rare that it's not actually valued by a lot of interviewers; if i was making the calls: not sure i would dock somebody if they didn't creatively come up with solutions to problems, thought about this too: created rubric for what's important for new hires: 1. algorithm approach: I give you a problem and you tell me how you're going to solve it, 2. communications: how you're able to work thorugh the problem without too much detail but me understanding what you're doing, 3. code syntax: will the code compile and run? doing things the right way, 4. project complexity: how difficult was this thing that you did: often difficult to gauge because it's self reporting, tough because people are in a group and it's hard to determine what was individual contribution and what was group contribution, interviewed a CTO for a friend: interviewing goals: 1. prioritizing competing goals, have to know given 10 tasks which are you going to assign to your software engineers, how do you derisk things properly, 2. motivating others to join: as a strong cto, you must attract good talent, 3. technical ability, 4. workign with others and commanding authority without being a dictator",
,,"two big things I thought about that would have been great: 1. design docs -> never really learned them ever, even at google they were important, but i don't even know the pedagogi there, asides from practicing and critiquing, understanding what structure is, found that to be biggest weakness at Google and it's very important skill, different than just writing code, feel like they run a gamut of lots of different things, communicating ideas before writing code, it's more than just a plan, it's more like structure, reading up on pedagogi for that could be good, it's like a design pattern, structures for how you go about structuring code, underscore ipmortantance: wrote article about code reviews, being what happens after you write code, a lot of times at Google and other places people would knitpick inconsequential details, but broader structure and larger purpose is more important, beyond design doc that was never questioned, promotions and google were focused on systems level reworking, it was about simplifying system at high level fro jr engineers to understand it better, desing clean systems got promotions, and that's what design docs do, that's the number 1 thing, would love to review whatever pedagogi we can find on it, would be much more focused and workable if maybe everyone writes design doc for what their building, they ONLY write design doc for this, once you write it, design for code is basically figured out",
,,"2. didn;t exist when i was in school: Docker: it's no longer new in the sense that it would be a new thing to teach, but it's becoming quite foundational to know how to do it, don't even need to teach it directly, but utilize it in projects or components that you do so that people get exposed to it, just having people install it and use it, I worked on a couple different projects at Google: built infrastructure for building Docker containers on Google's cloud, Docker is a build system: you specify your system in code basically, I had this laptop that had both linux and windows boot, as I took classes I installed more and more packages, as you install more those packages start to conflict and slow down computer, the problems you run into, no one else has run into them because you don't have a clean working base, and for me it was one of teh most frustrating components of engineering, and solving this problem I'm not creating a novel approach, my victory is running hello world, Docker almost completely gets rid of this problem, I can get Docker running really easy, but I've used it a lot",
,,"Docker: have a from directory taht says what you're building from, you say I need python, pip, pillow (image processing), mysequel, bindings for python, often you'll pin libraries to specific version, there can still be some problems in docker when you specify libraries and they update in teh background, you get rid of that by pinning evrey single lirbary to a single version, the whole notion of works for me disappears; program only works on certain computer, you build a whole new VM on docker each time you use it, maybe a module of extended code is using docker, they download docker, they build that thing, then you give them nontrivial task that's writing code, but you also give them task to add new library, in some small way they're editing the docker file and extending that it's working, this should really be in almost all courses, this kind of pattern, a lot of times you're not running code when grading, but this makes it much easier to run code from other computers, definitely have to explain why it's important, tough because some people wil just have installed linux and there's no point, but others will spend hours dealing with this, virtual machines were also a solution to that",
,,"3rd thing: I did some work at google and elsewhere: when I do personal projects and i own the whole thing, so much work goes into integrating 3rd party libraries, at Google i did almost none of that, google is unique because you don't use ANY third party libraries, it's all in Google's code base, extended libraries come from Google3, almost anything in real world has already been done and you just get the library, lots of people at Olin care more about, lots of libraries have dependencies that are super hard to get",
,,"third party libraries: build things for impact, could also be part of a docker thing, maybe creating an app that lets you put two pictures on top of each other, going to their page and figuring out how to blur an image, just figuring out how to use that stuff that isn't Olin supported, one idea: you have to use python and some sort of library to accomplish a given task",