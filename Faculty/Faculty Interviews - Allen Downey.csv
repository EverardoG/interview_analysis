,,Ever,Lydia
How computing intersects with their field,How would you describe your field?,"undergrad: civil, grad: compsci, phd: engineering, lots of data science, bayesian",
,How has computing intersected with previous jobs?,"with everything, master thesis: pavement eval w/ camera, pics of road surface, looking for cracking patterns, programming since 12, had a commodore 64, had first computer in the world with greek letters (maybe)",
,What background do you have with computing?,"commodore 64 in hs, had undergrad at MIT: lots of C, gradschool: computational fluild dynamics, os research for parallel computing, measurement, modeling, simulation in C, first teaching was at Colby College (liberal arts college), working on java book at Colby, then someone turned it into Python, learned from own book, since then python is core language (18 years), went to wellesley, taught compsci, then small undergrad college (now here, 15 years)",
,What did you learn in your education relating to computing?,"no classes in hs for computing, one class in college: C programming, no CS undergrad curriculum, crammed in grad school for CS, only official cs I've done, didn't need cs for classes, engineering curriculum had no computing in it, we would use statistics for a grad level class, had a couple of programming classes, took C class taught by civil engineering, cs department didn't want to teach people how to programming, they don't teach programming, they don't have the incentive to help other majors, lisp was as useless as possible to keep other departments from learning programming in MIT class, lots of places are like that, cs departments don't like teaching people how to program, part of it is that it's a reaction to people thinking cs is all programming, cs is focused on teaching cs, not easy programming",
What computing they have students do in their classes that they teach,What classes do you teach/ have taught?,"a lot: modsim a number of times, early version of ISIM, UOCD, all of the software classes: FOCS, softsys, softdes, data science, comp version of singal processing, SCOPE, complexity science: intermediate computing class that's an intro to complexity science: interdiscplinary field that does discrete models of systems",
,How have you utilized computing in those classes (if applicable)?,"pretty much every class I teach is heavily computing based, computing is used to learn and understand something else, complexity science + stats are all examples where i teacha domain topic and i use computation to do that, some classes I teach computation to teach computation, usually its a means to and end",
,What computing skills would you like your students to have going into your classes?,"almost all classes are designed for people who have basic programming skills, coming out of softdes, modsim intended for a range of people- challenging to create, an approach i think helps is to think of it not as a body of knowledge but as an educational environment where everyone can learn as much as they can, someone w/ no programming focused on programming, someone who can already do that can focus on modeling, so different people get very different outcomes, educators: foundation experiences: thinking about prereqs, and some people take it to extrme of taking everyone to the SAME level, which is conflict of education philosophy, people are often thinking of prereqs as levelers, trying to get everyone to same level so that they all start from teh same place, but then you realize it's a terrible idea, only way to achieve that is to prevent people with experience from using it, and really limiting what people can accomplish, i think if you create a good educational environment, everybody is going to go at the pace that they're doing to go, the better the environment is, the wider the spread will be, it will probably be bigger at the end, some people will love it and go crazy, other people are gonna not love it and hopefully they're making progress. If its' a good educational nviorment everyone will be making provgress, but theyre just gonna go at different speeds",
,"Where in your class would you like to utilize computing, but don't? What's keeping you from doing so?","dont think I could use it more, it's maxed out, more advanced programming: umm... more would be better, but that's not the most burning issue, think what i would like is ideally 100 percent students have enough comfort with programming that it's not a limiting reagent, if a student is trying to learn a concept, but theyre hung up debugging, instead of programming is helping them learn, its in the way",
,,"issue that comes up: my approach is computation helps learn other stuff, so I'm almost always building software intended to help, but people get hung up with details of teh software, almost always using software engineering tools to help with that, building objects, APIs, functions, etc to make concepts easy and programming transparent, which seems very obvious, but I have been repeatedly baffled by number of people who don't like that, energy with which they don't like that, two examples: 1. if you look at my blog, last few articles ,amazon review of my signal processing book, someone said that you should just use numpy or scipy, and he talked smack on Allen Downey's library, I explained in the preface why i'm using my library, this library makes mistakes impossible, if you wanna know more, look at source code, but first we wanna learn how to use it. 2. modsim: subtantial part is we hate the library, think there are a lot of things to make it more palatable and respond, but i do not understand the objection, heard one thing that makes sense maybe: working with multilayered library and you get error message from deep down it can be really painful, only sensible objection i heard, but that doesn't hold up because if you're using numpy or sci pi you're already 6 levels deep, in fact there are afew things in modsim library that unpack error messages",
,,"whenever teaching computing class, have to pick domain, and also how much computation to use",
,,"breaking it out into a computing class runs into same porblem of breaking out math classes, lets say you go off and take a math class intended to infrom engineering curriculum, we know how to teach math class about mathematics, and how to teach an engineering class where we learn math for engineering, but every engineering program sends students to math department to take classes like calc or lin, then they go back to engineering and they're supposed to apply math to engineering, it totallly does not work at all, catastrophic failure, if you are framing a computing class in that same way, then i think you potentially have the same problem, they go to cs dept, they learn ml, then they go back and they engineering class that isn't taught computationally,",
,,"one of the things that happens when you teach integrated things as that if you integrate math and physics, you get physics, and if you integrate those with engineering, you get engineering, then math is a detour -> why are we doing extra math? or you end up with a fake way to get math into curriculum, gratitous math-foo, if you're doign engineering computationally, you're working with discrete, and then someone waves continuous mathematics wand, and it becomes an integral, then you break it into pieces and solve, like the boat problem in QEA, the solution i would is break boat into elements, and all computations are straight forward array operations, so why do you ever do anything continuous? -> why do integrals? no insight, doesn't help solve problems",
,,"if the goal is to support engineering curriculum: I would be doing computational science and engineering, CSE, if that's the goal, I would not do computer science, i would talk to people doing computational science and engineering, substantial part of that is software engineering and reproducable science, look at things like center for open science, look at Allen's blog, 6 stages of unreliable science",
,,"as people start to applyu programming to science and engineering, get people to good quality code, regression testing, version control, automated build system, layers of abstraction, use functions that are abstract, objects that represent appropriate data structures, lots of this stuff happening in CSE that's invisible, I know whats going on, but by and large practicing scientists and engineering don't know the software engineering stuff, and neither do computer scientists, this is important stuff that becomes mroe and more important, currently its not, this is my frustration with current classes, lots of engineering classes use stage 3 coding, which used to be the norm",